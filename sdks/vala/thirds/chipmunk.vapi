/* chipmunk.vapi generated by vapigen, do not modify.
Generator script maintainer: http://gitorious.org/~tecywiz121
Generated for Chipmunk v6.1.4
*/

[CCode (cprefix = "cp", lower_case_cprefix = "cp")]
namespace cp {
	[Compact]
	[CCode (free_function = "cpArrayFree", cheader_filename = "chipmunk/chipmunk.h")]
	public class Array {
		public void* arr;
		public int max;
		public int num;
		[CCode (cname = "cpArrayNew")]
		public Array (int size);
		[CCode (cname = "cpArrayClear")]
		public void Clear ();
		[CCode (cname = "cpArrayContains")]
		public int Contains (void* ptr);
		[CCode (cname = "cpArrayDeleteIndex")]
		public void DeleteIndex (int idx);
		[CCode (cname = "cpArrayDeleteObj")]
		public void DeleteObj (void* obj);
		[CCode (cname = "cpArrayEach")]
		public void Each (cp.ArrayIter iterFunc, void* data);
		[CCode (cname = "cpArrayPop")]
		public void* Pop ();
		[CCode (cname = "cpArrayPush")]
		public void Push (void* object);
	}
	[Compact]
	[CCode (free_function = "cpBodyFree", cheader_filename = "chipmunk/chipmunk.h")]
	public class Body {
		public double a;
		public void* data;
		public cp.Vect f;
		public double i;
		public double i_inv;
		public double m;
		public double m_inv;
		public cp.Vect p;
		public weak cp.BodyPositionFunc position_func;
		public cp.Vect rot;
		public double t;
		public cp.Vect v;
		public cp.Vect v_bias;
		public double v_limit;
		public weak cp.BodyVelocityFunc velocity_func;
		public double w;
		public double w_bias;
		public double w_limit;
		[CCode (cname = "cpBodyNew")]
		public Body (double m, double i);
		[CCode (cname = "cpBodyApplyForce")]
		public void ApplyForce (cp.Vect f, cp.Vect r);
		[CCode (cname = "cpBodyResetForces")]
		public void ResetForces ();
		[CCode (cname = "cpBodySetAngle")]
		public void SetAngle (double a);
		[CCode (cname = "cpBodySetMass")]
		public void SetMass (double m);
		[CCode (cname = "cpBodySetMoment")]
		public void SetMoment (double i);
		[CCode (cname = "cpBodySlew")]
		public void Slew (cp.Vect pos, double dt);
		[CCode (cname = "cpBodyUpdatePosition")]
		public void UpdatePosition (double dt);
		[CCode (cname = "cpBodyUpdateVelocity")]
		public void UpdateVelocity (cp.Vect gravity, double damping, double dt);
	}
	[Compact]
	[CCode (free_function = "cpShapeFree", cheader_filename = "chipmunk/chipmunk.h")]
	public class CircleShape : cp.Shape {
		public cp.Vect c;
		public double r;
		public weak cp.Shape shape;
		public cp.Vect tc;
		[CCode (cname = "cpCircleShapeNew")]
		public CircleShape (cp.Body body, double radius, cp.Vect offset);
		[CCode (cname = "cpCircleShapeGetOffset")]
		public cp.Vect GetOffset ();
		[CCode (cname = "cpCircleShapeGetRadius")]
		public double GetRadius ();
	}
	[Compact]
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	public class CollisionHandler {
		public cp.CollisionType a;
		public cp.CollisionType b;
		public weak cp.CollisionBeginFunc begin;
		public void* data;
		public weak cp.CollisionPostSolveFunc postSolve;
		public weak cp.CollisionPreSolveFunc preSolve;
		public weak cp.CollisionSeparateFunc separate;
	}
	[Compact]
	[CCode (free_function = "cpConstraintFree", cheader_filename = "chipmunk/chipmunk.h")]
	public class Constraint {
		public weak cp.Body a;
		public weak cp.Body b;
		public double biasCoef;
		public void* data;
		public weak cp.ConstraintClass klass;
		public double maxBias;
		public double maxForce;
	}
	[Compact]
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	public class ConstraintClass {
		public weak cp.ConstraintApplyImpulseFunction applyImpulse;
		public weak cp.ConstraintGetImpulseFunction getImpulse;
		public weak cp.ConstraintPreStepFunction preStep;
	}
	[Compact]
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	public class Contact {
		public double bias;
		public double bounce;
		public double dist;
		public cp.HashValue hash;
		public double jBias;
		public double jnAcc;
		public double jtAcc;
		public cp.Vect n;
		public double nMass;
		public cp.Vect p;
		public cp.Vect r1;
		public cp.Vect r2;
		public double tMass;
	}
	[Compact]
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	public class ContactBufferHeader {
		public void* next;
		public uint numContacts;
		public int stamp;
	}
	[Compact]
	[CCode (free_function = "cpConstraintFree", cheader_filename = "chipmunk/chipmunk.h")]
	public class DampedRotarySpring : cp.Constraint {
		public weak cp.Constraint constraint;
		public double damping;
		public double dt;
		public double iSum;
		public double restAngle;
		public weak cp.DampedRotarySpringTorqueFunc springTorqueFunc;
		public double stiffness;
		public double target_wrn;
		[CCode (cname = "cpDampedRotarySpringNew")]
		public DampedRotarySpring (cp.Body a, cp.Body b, double restAngle, double stiffness, double damping);
		[CCode (cname = "cpDampedRotarySpringGetClass")]
		public static unowned cp.ConstraintClass GetClass ();
	}
	[Compact]
	[CCode (free_function = "cpConstraintFree", cheader_filename = "chipmunk/chipmunk.h")]
	public class DampedSpring : cp.Constraint {
		public cp.Vect anchr1;
		public cp.Vect anchr2;
		public weak cp.Constraint constraint;
		public double damping;
		public double dt;
		public cp.Vect n;
		public double nMass;
		public cp.Vect r1;
		public cp.Vect r2;
		public double restLength;
		public weak cp.DampedSpringForceFunc springForceFunc;
		public double stiffness;
		public double target_vrn;
		[CCode (cname = "cpDampedSpringNew")]
		public DampedSpring (cp.Body a, cp.Body b, cp.Vect anchr1, cp.Vect anchr2, double restLength, double stiffness, double damping);
		[CCode (cname = "cpDampedSpringGetClass")]
		public static unowned cp.ConstraintClass GetClass ();
	}
	[Compact]
	[CCode (free_function = "cpConstraintFree", cheader_filename = "chipmunk/chipmunk.h")]
	public class GearJoint : cp.Constraint {
		public double bias;
		public weak cp.Constraint constraint;
		public double iSum;
		public double jAcc;
		public double jMax;
		public double phase;
		public double ratio;
		public double ratio_inv;
		[CCode (cname = "cpGearJointNew")]
		public GearJoint (cp.Body a, cp.Body b, double phase, double ratio);
		[CCode (cname = "cpGearJointGetClass")]
		public static unowned cp.ConstraintClass GetClass ();
		[CCode (cname = "cpGearJointSetRatio")]
		public static void SetRatio (cp.Constraint constraint, double value);
	}
	[Compact]
	[CCode (free_function = "cpConstraintFree", cheader_filename = "chipmunk/chipmunk.h")]
	public class GrooveJoint : cp.Constraint {
		public cp.Vect anchr2;
		public cp.Vect bias;
		public double clamp;
		public weak cp.Constraint constraint;
		public cp.Vect grv_a;
		public cp.Vect grv_b;
		public cp.Vect grv_n;
		public cp.Vect grv_tn;
		public cp.Vect jAcc;
		public double jMaxLen;
		public cp.Vect k1;
		public cp.Vect k2;
		public cp.Vect r1;
		public cp.Vect r2;
		[CCode (cname = "cpGrooveJointNew")]
		public GrooveJoint (cp.Body a, cp.Body b, cp.Vect groove_a, cp.Vect groove_b, cp.Vect anchr2);
		[CCode (cname = "cpGrooveJointGetClass")]
		public static unowned cp.ConstraintClass GetClass ();
	}
	[Compact]
	[CCode (free_function = "cpHashSetFree", cheader_filename = "chipmunk/chipmunk.h")]
	public class HashSet {
		public weak cp.Array allocatedBuffers;
		public void* default_value;
		public int entries;
		public weak cp.HashSetEqlFunc eql;
		[CCode (array_length = false)]
		public weak cp.HashSetBin[] pooledBins;
		public int size;
		public weak cp.HashSetBin table;
		public weak cp.HashSetTransFunc trans;
		[CCode (cname = "cpHashSetNew")]
		public HashSet (int size, cp.HashSetEqlFunc eqlFunc, cp.HashSetTransFunc trans);
		[CCode (cname = "cpHashSetEach")]
		public void Each (cp.HashSetIterFunc func, void* data);
		[CCode (cname = "cpHashSetFilter")]
		public void Filter (cp.HashSetFilterFunc func, void* data);
		[CCode (cname = "cpHashSetFind")]
		public void* Find (cp.HashValue hash, void* ptr);
		[CCode (cname = "cpHashSetInsert")]
		public void* Insert (cp.HashValue hash, void* ptr, void* data);
		[CCode (cname = "cpHashSetRemove")]
		public void* Remove (cp.HashValue hash, void* ptr);
	}
	[Compact]
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	public class HashSetBin {
		public void* elt;
		public cp.HashValue hash;
		public void* next;
	}
	[Compact]
	[CCode (free_function = "cpConstraintFree", cheader_filename = "chipmunk/chipmunk.h")]
	public class PinJoint : cp.Constraint {
		public cp.Vect anchr1;
		public cp.Vect anchr2;
		public double bias;
		public weak cp.Constraint constraint;
		public double dist;
		public double jnAcc;
		public double jnMax;
		public cp.Vect n;
		public double nMass;
		public cp.Vect r1;
		public cp.Vect r2;
		[CCode (cname = "cpPinJointNew")]
		public PinJoint (cp.Body a, cp.Body b, cp.Vect anchr1, cp.Vect anchr2);
		[CCode (cname = "cpPinJointGetClass")]
		public static unowned cp.ConstraintClass GetClass ();
	}
	[Compact]
	[CCode (free_function = "cpConstraintFree", cheader_filename = "chipmunk/chipmunk.h")]
	public class PivotJoint : cp.Constraint {
		public cp.Vect anchr1;
		public cp.Vect anchr2;
		public cp.Vect bias;
		public weak cp.Constraint constraint;
		public cp.Vect jAcc;
		public double jMaxLen;
		public cp.Vect k1;
		public cp.Vect k2;
		public cp.Vect r1;
		public cp.Vect r2;
		[CCode (cname = "cpPivotJointNew")]
		public PivotJoint (cp.Body a, cp.Body b, cp.Vect pivot);
		[CCode (cname = "cpPivotJointGetClass")]
		public static unowned cp.ConstraintClass GetClass ();
		[CCode (cname = "cpPivotJointNew2")]
		public PivotJoint.two (cp.Body a, cp.Body b, cp.Vect anchr1, cp.Vect anchr2);
	}
	[Compact]
	[CCode (free_function = "cpShapeFree", cheader_filename = "chipmunk/chipmunk.h")]
	public class PolyShape : cp.Shape {
		public weak cp.PolyShapeAxis axes;
		public int numVerts;
		public weak cp.Shape shape;
		public weak cp.PolyShapeAxis tAxes;
		[CCode (array_length = false)]
		public weak cp.Vect[] tVerts;
		[CCode (array_length = false)]
		public weak cp.Vect[] verts;
		[CCode (cname = "cpPolyShapeNew")]
		public PolyShape (cp.Body body, [CCode (array_length_pos = 1.9)] cp.Vect[] verts, cp.Vect offset);
		[CCode (cname = "cpPolyShapeGetNumVerts")]
		public static int GetNumVerts (cp.Shape shape);
		[CCode (cname = "cpPolyShapeGetVert")]
		public static cp.Vect GetVert (cp.Shape shape, int idx);
	}
	[Compact]
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	public class PolyShapeAxis {
		public double d;
		public cp.Vect n;
	}
	[Compact]
	[CCode (free_function = "cpConstraintFree", cheader_filename = "chipmunk/chipmunk.h")]
	public class RatchetJoint : cp.Constraint {
		public double angle;
		public double bias;
		public weak cp.Constraint constraint;
		public double iSum;
		public double jAcc;
		public double jMax;
		public double phase;
		public double ratchet;
		[CCode (cname = "cpRatchetJointNew")]
		public RatchetJoint (cp.Body a, cp.Body b, double phase, double ratchet);
		[CCode (cname = "cpRatchetJointGetClass")]
		public static unowned cp.ConstraintClass GetClass ();
	}
	[Compact]
	[CCode (free_function = "cpConstraintFree", cheader_filename = "chipmunk/chipmunk.h")]
	public class RotaryLimitJoint : cp.Constraint {
		public double bias;
		public weak cp.Constraint constraint;
		public double iSum;
		public double jAcc;
		public double jMax;
		public double max;
		public double min;
		[CCode (cname = "cpRotaryLimitJointNew")]
		public RotaryLimitJoint (cp.Body a, cp.Body b, double min, double max);
		[CCode (cname = "cpRotaryLimitJointGetClass")]
		public static unowned cp.ConstraintClass GetClass ();
	}
	[Compact]
	[CCode (free_function = "cpShapeFree", cheader_filename = "chipmunk/chipmunk.h")]
	public class SegmentShape : cp.Shape {
		public cp.Vect a;
		public cp.Vect b;
		public cp.Vect n;
		public double r;
		public weak cp.Shape shape;
		public cp.Vect ta;
		public cp.Vect tb;
		public cp.Vect tn;
		[CCode (cname = "cpSegmentShapeNew")]
		public SegmentShape (cp.Body body, cp.Vect a, cp.Vect b, double radius);
		[CCode (cname = "cpSegmentShapeGetA")]
		public cp.Vect GetA ();
		[CCode (cname = "cpSegmentShapeGetB")]
		public cp.Vect GetB ();
		[CCode (cname = "cpSegmentShapeGetNormal")]
		public cp.Vect GetNormal ();
		[CCode (cname = "cpSegmentShapeGetRadius")]
		public double GetRadius ();
	}
	[Compact]
	[CCode (free_function = "cpShapeFree", cheader_filename = "chipmunk/chipmunk.h")]
	public class Shape {
		public cp.BB bb;
		public weak cp.Body body;
		public cp.CollisionType collision_type;
		public void* data;
		public double e;
		public cp.Group group;
		public cp.HashValue hashid;
		public weak cp.ShapeClass klass;
		public cp.Layers layers;
		public int sensor;
		public cp.Vect surface_v;
		public double u;
		[CCode (cname = "cpShapeCacheBB")]
		public cp.BB CacheBB ();
		[CCode (cname = "cpShapePointQuery")]
		public int PointQuery (cp.Vect p);
		[CCode (cname = "cpShapeSegmentQuery")]
		public int SegmentQuery (cp.Vect a, cp.Vect b, cp.SegmentQueryInfo info);
	}
	[Compact]
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	public class ShapeClass {
		public weak GLib.Callback cacheData;
		public weak GLib.Callback destroy;
		public weak GLib.Callback pointQuery;
		public weak GLib.Callback segmentQuery;
		public cp.ShapeType type;
	}
	[Compact]
	[CCode (free_function = "cpConstraintFree", cheader_filename = "chipmunk/chipmunk.h")]
	public class SimpleMotor : cp.Constraint {
		public weak cp.Constraint constraint;
		public double iSum;
		public double jAcc;
		public double jMax;
		public double rate;
		[CCode (cname = "cpSimpleMotorNew")]
		public SimpleMotor (cp.Body a, cp.Body b, double rate);
		[CCode (cname = "cpSimpleMotorGetClass")]
		public static unowned cp.ConstraintClass GetClass ();
	}
	[Compact]
	[CCode (free_function = "cpConstraintFree", cheader_filename = "chipmunk/chipmunk.h")]
	public class SlideJoint : cp.Constraint {
		public cp.Vect anchr1;
		public cp.Vect anchr2;
		public double bias;
		public weak cp.Constraint constraint;
		public double jnAcc;
		public double jnMax;
		public double max;
		public double min;
		public cp.Vect n;
		public double nMass;
		public cp.Vect r1;
		public cp.Vect r2;
		[CCode (cname = "cpSlideJointNew")]
		public SlideJoint (cp.Body a, cp.Body b, cp.Vect anchr1, cp.Vect anchr2, double min, double max);
		[CCode (cname = "cpSlideJointGetClass")]
		public static unowned cp.ConstraintClass GetClass ();
	}
	[Compact]
	[CCode (free_function = "cpSpaceFree", cheader_filename = "chipmunk/chipmunk.h")]
	public class Space {
		public weak cp.SpaceHash activeShapes;
		public weak cp.Array allocatedBuffers;
		public weak cp.Array arbiters;
		public weak cp.Array bodies;
		public weak cp.HashSet collFuncSet;
		public weak cp.Array constraints;
		public weak cp.ContactBufferHeader contactBuffersHead;
		public weak cp.ContactBufferHeader contactBuffersTail;
		public weak cp.HashSet contactSet;
		public double damping;
		public weak cp.CollisionHandler defaultHandler;
		public int elasticIterations;
		public cp.Vect gravity;
		public int iterations;
		public int locked;
		public weak cp.Array pooledArbiters;
		public weak cp.HashSet postStepCallbacks;
		public int stamp;
		public weak cp.Body staticBody;
		public weak cp.SpaceHash staticShapes;
		[CCode (cname = "cpSpaceNew")]
		public Space ();
		[CCode (cname = "cpSpaceAddBody")]
		public unowned cp.Body AddBody (cp.Body body);
		[CCode (cname = "cpSpaceAddCollisionHandler")]
		public void AddCollisionHandler (cp.CollisionType a, cp.CollisionType b, cp.CollisionBeginFunc begin, cp.CollisionPreSolveFunc preSolve, cp.CollisionPostSolveFunc postSolve, cp.CollisionSeparateFunc separate, void* data);
		[CCode (cname = "cpSpaceAddConstraint")]
		public unowned cp.Constraint AddConstraint (cp.Constraint constraint);
		[CCode (cname = "cpSpaceAddPostStepCallback")]
		public void AddPostStepCallback (cp.PostStepFunc func, void* obj, void* data);
		[CCode (cname = "cpSpaceAddShape")]
		public unowned cp.Shape AddShape (cp.Shape shape);
		[CCode (cname = "cpSpaceAddStaticShape")]
		public unowned cp.Shape AddStaticShape (cp.Shape shape);
		[CCode (cname = "cpSpaceBBQuery")]
		public void BBQuery (cp.BB bb, cp.Layers layers, cp.Group group, cp.SpaceBBQueryFunc func, void* data);
		[CCode (cname = "cpSpaceEachBody")]
		public void EachBody (cp.SpaceBodyIterator func, void* data);
		[CCode (cname = "cpSpaceFreeChildren")]
		public void FreeChildren ();
		[CCode (cname = "cpSpacePointQuery")]
		public void PointQuery (cp.Vect point, cp.Layers layers, cp.Group group, cp.SpacePointQueryFunc func, void* data);
		[CCode (cname = "cpSpacePointQueryFirst")]
		public unowned cp.Shape PointQueryFirst (cp.Vect point, cp.Layers layers, cp.Group group);
		[CCode (cname = "cpSpaceRehashStatic")]
		public void RehashStatic ();
		[CCode (cname = "cpSpaceRemoveBody")]
		public void RemoveBody (cp.Body body);
		[CCode (cname = "cpSpaceRemoveCollisionHandler")]
		public void RemoveCollisionHandler (cp.CollisionType a, cp.CollisionType b);
		[CCode (cname = "cpSpaceRemoveConstraint")]
		public void RemoveConstraint (cp.Constraint constraint);
		[CCode (cname = "cpSpaceRemoveShape")]
		public void RemoveShape (cp.Shape shape);
		[CCode (cname = "cpSpaceRemoveStaticShape")]
		public void RemoveStaticShape (cp.Shape shape);
		[CCode (cname = "cpSpaceResizeActiveHash")]
		public void ResizeActiveHash (double dim, int count);
		[CCode (cname = "cpSpaceResizeStaticHash")]
		public void ResizeStaticHash (double dim, int count);
		[CCode (cname = "cpSpaceSegmentQuery")]
		public int SegmentQuery (cp.Vect start, cp.Vect end, cp.Layers layers, cp.Group group, cp.SpaceSegmentQueryFunc func, void* data);
		[CCode (cname = "cpSpaceSegmentQueryFirst")]
		public unowned cp.Shape SegmentQueryFirst (cp.Vect start, cp.Vect end, cp.Layers layers, cp.Group group, cp.SegmentQueryInfo @out);
		[CCode (cname = "cpSpaceSetDefaultCollisionHandler")]
		public void SetDefaultCollisionHandler (cp.CollisionBeginFunc begin, cp.CollisionPreSolveFunc preSolve, cp.CollisionPostSolveFunc postSolve, cp.CollisionSeparateFunc separate, void* data);
		[CCode (cname = "cpSpaceStep")]
		public void Step (double dt);
	}
	[Compact]
	[CCode (free_function = "cpSpaceHashFree", cheader_filename = "chipmunk/chipmunk.h")]
	public class SpaceHash {
		public weak cp.Array allocatedBuffers;
		public weak cp.SpaceHashBBFunc bbfunc;
		public double celldim;
		public weak cp.HashSet handleSet;
		public int numcells;
		public cp.SpaceHashBin pooledBins;
		public weak cp.Array pooledHandles;
		public int stamp;
		public cp.SpaceHashBin table;
		[CCode (cname = "cpSpaceHashNew")]
		public SpaceHash (double celldim, int cells, cp.SpaceHashBBFunc bbfunc);
		[CCode (cname = "cpSpaceHashEach")]
		public void Each (cp.SpaceHashIterator func, void* data);
		[CCode (cname = "cpSpaceHashInsert")]
		public void Insert (void* obj, cp.HashValue id, cp.BB bb);
		[CCode (cname = "cpSpaceHashPointQuery")]
		public void PointQuery (cp.Vect point, cp.SpaceHashQueryFunc func, void* data);
		[CCode (cname = "cpSpaceHashQuery")]
		public void Query (void* obj, cp.BB bb, cp.SpaceHashQueryFunc func, void* data);
		[CCode (cname = "cpSpaceHashQueryInsert")]
		public void QueryInsert (void* obj, cp.BB bb, cp.SpaceHashQueryFunc func, void* data);
		[CCode (cname = "cpSpaceHashQueryRehash")]
		public void QueryRehash (cp.SpaceHashQueryFunc func, void* data);
		[CCode (cname = "cpSpaceHashRehash")]
		public void Rehash ();
		[CCode (cname = "cpSpaceHashRehashObject")]
		public void RehashObject (void* obj, cp.HashValue id);
		[CCode (cname = "cpSpaceHashRemove")]
		public void Remove (void* obj, cp.HashValue id);
		[CCode (cname = "cpSpaceHashResize")]
		public void Resize (double celldim, int numcells);
		[CCode (cname = "cpSpaceHashSegmentQuery")]
		public void SegmentQuery (void* obj, cp.Vect a, cp.Vect b, double t_exit, cp.SpaceHashSegmentQueryFunc func, void* data);
	}
	[CCode (type_id = "CPTYPE_ARBITER", cheader_filename = "chipmunk/chipmunk.h")]
	public struct Arbiter {
		public int numContacts;
		[CCode (array_length = false)]
		public weak cp.Contact[] contacts;
		public weak cp.Shape private_a;
		public weak cp.Shape private_b;
		public double e;
		public double u;
		public cp.Vect surface_vr;
		public int stamp;
		public void* handler;
		public uchar swappedColl;
		public cp.ArbiterState state;
		[CCode (cname = "cpArbiterApplyCachedImpulse")]
		public void ApplyCachedImpulse ();
		[CCode (cname = "cpArbiterApplyImpulse")]
		public void ApplyImpulse (double eCoef);
		[CCode (cname = "cpArbiterIgnore")]
		public void Ignore ();
		[CCode (cname = "cpArbiterInit")]
		public cp.Arbiter Init (cp.Shape a, cp.Shape b);
		[CCode (cname = "cpArbiterPreStep")]
		public void PreStep (double dt_inv);
		[CCode (cname = "cpArbiterTotalImpulse")]
		public cp.Vect TotalImpulse ();
		[CCode (cname = "cpArbiterTotalImpulseWithFriction")]
		public cp.Vect TotalImpulseWithFriction ();
		[CCode (cname = "cpArbiterUpdate")]
		public void Update (cp.Contact contacts, int numContacts, void* handler, cp.Shape a, cp.Shape b);
	}
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	[SimpleType]
	public struct BB {
		public double l;
		public double b;
		public double r;
		public double t;
		[CCode (cname = "cpBBNew")]
		public BB (double l, double b, double r, double t);
		[CCode (cname = "cpBBClampVect")]
		public cp.Vect ClampVect (cp.Vect v);
		[CCode (cname = "cpBBWrapVect")]
		public cp.Vect WrapVect (cp.Vect v);
	}
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	[SimpleType]
	[IntegerType (rank = 0)]
	public struct CollisionType : uint {
	}
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	[SimpleType]
	[IntegerType (rank = 0)]
	public struct Group : uint {
	}
	[CCode (type_id = "CPTYPE_HANDLE", cheader_filename = "chipmunk/chipmunk.h")]
	public struct Handle {
		public void* obj;
		public int retain;
		public int stamp;
	}
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	[SimpleType]
	[IntegerType (rank = 0)]
	public struct HashValue : uint {
	}
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	[SimpleType]
	[IntegerType (rank = 0)]
	public struct Layers : uint {
	}
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	[SimpleType]
	public struct Moment {
		[CCode (cname = "cpMomentForBox")]
		public static double ForBox (double m, double width, double height);
		[CCode (cname = "cpMomentForCircle")]
		public static double ForCircle (double m, double r1, double r2, cp.Vect offset);
		[CCode (cname = "cpMomentForPoly")]
		public static double ForPoly (double m, [CCode (array_length_pos = 1.9)] cp.Vect[] verts, cp.Vect offset);
		[CCode (cname = "cpMomentForSegment")]
		public static double ForSegment (double m, cp.Vect a, cp.Vect b);
	}
	[CCode (type_id = "CPTYPE_SEGMENT_QUERY_INFO", cheader_filename = "chipmunk/chipmunk.h")]
	public struct SegmentQueryInfo {
		public void* shape;
		public double t;
		public cp.Vect n;
		[CCode (cname = "cpSegmentQueryInfoPrint")]
		public void Print ();
	}
	[CCode (type_id = "CPTYPE_SPACE_HASH_BIN", cheader_filename = "chipmunk/chipmunk.h")]
	public struct SpaceHashBin {
		public cp.Handle handle;
		public void* next;
	}
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	[SimpleType]
	public struct Vect {
		public double x;
		public double y;
		[CCode (cname = "cpvforangle")]
		public Vect.ForAngle (double a);
		[CCode (cname = "cpvslerp")]
		public cp.Vect cpvslerp (cp.Vect v2, double t);
		[CCode (cname = "cpvslerpconst")]
		public cp.Vect cpvslerpconst (cp.Vect v2, double a);
		[CCode (cname = "cpvlength")]
		public double length ();
		[CCode (cname = "cpvstr")]
		public unowned string to_string ();
		[CCode (cname = "cpvtoangle")]
		public double toangle ();
	}
	[CCode (cprefix = "cp", has_type_id = false, cheader_filename = "chipmunk/chipmunk.h")]
	public enum ArbiterState {
		ArbiterStateNormal,
		ArbiterStateFirstColl,
		ArbiterStateIgnore
	}
	[CCode (cprefix = "CP_", has_type_id = false, cheader_filename = "chipmunk/chipmunk.h")]
	public enum ShapeType {
		CIRCLE_SHAPE,
		SEGMENT_SHAPE,
		POLY_SHAPE,
		NUM_SHAPES
	}
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	public delegate void ArrayIter (void* ptr);
	[CCode (cheader_filename = "chipmunk/chipmunk.h", has_target = false)]
	public delegate void BodyPositionFunc (cp.Body body, double dt);
	[CCode (cheader_filename = "chipmunk/chipmunk.h", has_target = false)]
	public delegate void BodyVelocityFunc (cp.Body body, cp.Vect gravity, double damping, double dt);
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	public delegate int CollisionBeginFunc (cp.Arbiter arb, cp.Space space);
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	public delegate void CollisionPostSolveFunc (cp.Arbiter arb, cp.Space space);
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	public delegate int CollisionPreSolveFunc (cp.Arbiter arb, cp.Space space);
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	public delegate void CollisionSeparateFunc (cp.Arbiter arb, cp.Space space);
	[CCode (cheader_filename = "chipmunk/chipmunk.h", has_target = false)]
	public delegate void ConstraintApplyImpulseFunction (cp.Constraint constraint);
	[CCode (cheader_filename = "chipmunk/chipmunk.h", has_target = false)]
	public delegate double ConstraintGetImpulseFunction (cp.Constraint constraint);
	[CCode (cheader_filename = "chipmunk/chipmunk.h", has_target = false)]
	public delegate void ConstraintPreStepFunction (cp.Constraint constraint, double dt, double dt_inv);
	[CCode (cheader_filename = "chipmunk/chipmunk.h", has_target = false)]
	public delegate double DampedRotarySpringTorqueFunc (cp.DampedRotarySpring spring, double relativeAngle);
	[CCode (cheader_filename = "chipmunk/chipmunk.h", has_target = false)]
	public delegate double DampedSpringForceFunc (cp.DampedSpring spring, double dist);
	[CCode (cheader_filename = "chipmunk/chipmunk.h", has_target = false)]
	public delegate int HashSetEqlFunc (void* ptr, void* elt);
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	public delegate int HashSetFilterFunc (void* elt);
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	public delegate void HashSetIterFunc (void* elt);
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	public delegate void* HashSetTransFunc (void* ptr);
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	public delegate void PostStepFunc (cp.Space space, void* obj);
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	public delegate void SpaceBBQueryFunc (cp.Shape shape);
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	public delegate void SpaceBodyIterator (cp.Body body);
	[CCode (cheader_filename = "chipmunk/chipmunk.h", has_target = false)]
	public delegate cp.BB SpaceHashBBFunc (void* obj);
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	public delegate void SpaceHashIterator (void* obj);
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	public delegate void SpaceHashQueryFunc (void* obj1, void* obj2);
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	public delegate double SpaceHashSegmentQueryFunc (void* obj1, void* obj2);
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	public delegate void SpacePointQueryFunc (cp.Shape shape);
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	public delegate void SpaceSegmentQueryFunc (cp.Shape shape, double t, cp.Vect n);
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	public static void ApplyDampedSpring (cp.Body a, cp.Body b, cp.Vect anchr1, cp.Vect anchr2, double rlen, double k, double dmp, double dt);
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	public static int CollideShapes (cp.Shape a, cp.Shape b, cp.Contact arr);
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	public static cp.Vect ContactsSumImpulses ([CCode (array_length_pos = 1.9)] cp.Contact[] contacts);
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	public static cp.Vect ContactsSumImpulsesWithFriction ([CCode (array_length_pos = 1.9)] cp.Contact[] contacts);
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	public static void InitChipmunk ();
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	public static void Message (string message, string condition, string file, int line, int isError);
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	public static int PolyValidate ([CCode (array_length_pos = 1.9)] cp.Vect[] verts);
	[CCode (cheader_filename = "chipmunk/chipmunk.h")]
	public static void ResetShapeIdCounter ();
}
